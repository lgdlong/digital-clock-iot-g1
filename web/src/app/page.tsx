"use client";
import ClockDisplay from "@/components/ClockDisplay";
import DeviceStatus from "@/components/DeviceStatus";
import NextAlarm from "@/components/NextAlarm";
import ESP32TimeDisplay from "@/components/ESP32TimeDisplay";
import Link from "next/link";
import { useState, useEffect } from "react";
import mqtt from "mqtt";

export default function Home() {
  const [currentTime, setCurrentTime] = useState("00:00:00");
  const [isOnline, setIsOnline] = useState(false);
  const [mqttClient, setMqttClient] = useState<mqtt.MqttClient | null>(null);
  const [isMounted, setIsMounted] = useState(false);
  const [connectionError, setConnectionError] = useState<string>("");
  const [lastMqttUpdate, setLastMqttUpdate] = useState<number>(0);
  const [esp32Online, setEsp32Online] = useState(false);
  const nextAlarm = "06:30";
  const [hasSentInitialReset, setHasSentInitialReset] = useState(false);

  useEffect(() => {
    setIsMounted(true);
  }, []);

  useEffect(() => {
    if (!isMounted) return;

    let reconnectTimer: NodeJS.Timeout;
    let client: mqtt.MqttClient | null = null;
    let destroyed = false;

    const connectMQTT = () => {
      if (destroyed) return;
      console.log('üîÑ ƒêang k·∫øt n·ªëi t·ªõi ESP32 qua MQTT...');
      setConnectionError("");
      const isLocal = typeof window !== 'undefined' && window.location.hostname === 'localhost';
      const mqttUrls = isLocal
        ? [
            'ws://broker.emqx.io:8083/mqtt',
            'ws://test.mosquitto.org:8080',
            'ws://broker.hivemq.com:8000/mqtt'
          ]
        : [
            'wss://broker.hivemq.com:8884/mqtt',
            'wss://broker.emqx.io:8084/mqtt',
            'wss://test.mosquitto.org:8081',
            'wss://broker.hivemq.com:8000/mqtt'
          ];
      let currentUrlIndex = 0;

      const tryConnect = () => {
        if (destroyed) return;
        if (currentUrlIndex >= mqttUrls.length) {
          console.error('‚ùå T·∫•t c·∫£ MQTT brokers ƒë·ªÅu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c');
          setIsOnline(false);
          setConnectionError("Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi MQTT broker n√†o");
          return;
        }
        const mqttUrl = mqttUrls[currentUrlIndex];
        console.log(`üîÑ Th·ª≠ k·∫øt n·ªëi MQTT: ${mqttUrl}`);
        client = mqtt.connect(mqttUrl, {
          clientId: `WebApp-${Math.random().toString(16).slice(2, 8)}`,
          connectTimeout: 15000,
          keepalive: 60,
          clean: true,
          reconnectPeriod: 0,
        });
        client.on('connect', () => {
          if (destroyed) return;
          console.log(`‚úÖ ƒê√£ k·∫øt n·ªëi MQTT broker: ${mqttUrl}`);
          setIsOnline(true);
          setConnectionError("");
          setHasSentInitialReset(false);
          client!.subscribe('clock/time', (err) => {
            if (err) {
              console.error('‚ùå L·ªói subscribe:', err);
              setConnectionError("Kh√¥ng th·ªÉ subscribe topic th·ªùi gian");
            } else {
              console.log('üì° ƒê√£ subscribe topic clock/time');
            }
          });
        });
        client.on('message', (topic: string, message: any) => {
          if (topic === 'clock/time') {
            const timeFromESP32 = message.toString();
            console.log('‚è∞ Nh·∫≠n t·ª´ ESP32:', timeFromESP32);
            const timeRegex = /^\d{2}:\d{2}:\d{2}$/;
            if (timeRegex.test(timeFromESP32)) {
              setCurrentTime(timeFromESP32);
              setLastMqttUpdate(Date.now());
              console.log('[DEBUG] ƒê√£ c·∫≠p nh·∫≠t lastMqttUpdate:', new Date().toLocaleTimeString());
              setConnectionError("");
            } else {
              setConnectionError(`D·ªØ li·ªáu gi·ªù t·ª´ ESP32 kh√¥ng h·ª£p l·ªá: ${timeFromESP32}`);
              console.warn('[DEBUG] D·ªØ li·ªáu ESP32 kh√¥ng h·ª£p l·ªá:', timeFromESP32);
            }
          }
        });
        client.on('error', (error: Error) => {
          if (destroyed) return;
          console.error(`‚ùå L·ªói MQTT v·ªõi ${mqttUrl}:`, error);
          setIsOnline(false);
          setConnectionError(`L·ªói k·∫øt n·ªëi: ${error.message}`);
          if (client) {
            client.removeAllListeners();
            client.end(true);
            client = null;
          }
          currentUrlIndex++;
          reconnectTimer = setTimeout(tryConnect, 2000);
        });
        client.on('close', () => {
          if (destroyed) return;
          console.log(`üîå MQTT ƒë√£ ng·∫Øt k·∫øt n·ªëi: ${mqttUrl}`);
          setIsOnline(false);
          if (client) {
            client.removeAllListeners();
            client.end(true);
            client = null;
          }
          reconnectTimer = setTimeout(tryConnect, 3000);
        });
        client.on('offline', () => {
          if (destroyed) return;
          console.log(`üì° MQTT offline: ${mqttUrl}`);
          setIsOnline(false);
          setConnectionError("M·∫•t k·∫øt n·ªëi internet");
        });
        setMqttClient(client);
      };
      tryConnect();
    };
    connectMQTT();
    return () => {
      destroyed = true;
      if (reconnectTimer) clearTimeout(reconnectTimer);
      if (client) {
        client.removeAllListeners();
        client.end(true);
        client = null;
      }
    };
  }, [isMounted]);

  // Local time increment
  useEffect(() => {
    if (!isMounted || currentTime === "00:00:00") return;

    const interval = setInterval(() => {
      setCurrentTime((prevTime: string) => {
        const [hours, minutes, seconds] = prevTime.split(':').map(Number);
        let newSeconds = seconds + 1;
        let newMinutes = minutes;
        let newHours = hours;

        if (newSeconds >= 60) {
          newSeconds = 0;
          newMinutes += 1;
        }
        if (newMinutes >= 60) {
          newMinutes = 0;
          newHours += 1;
        }
        if (newHours >= 24) {
          newHours = 0;
        }

        return `${newHours.toString().padStart(2, '0')}:${newMinutes.toString().padStart(2, '0')}:${newSeconds.toString().padStart(2, '0')}`;
      });
    }, 1000);

    return () => clearInterval(interval);
  }, [isMounted, currentTime]);

  // G·ª≠i reset khi connect th√†nh c√¥ng l·∫ßn ƒë·∫ßu (ch·ªâ 1 l·∫ßn)
  useEffect(() => {
    if (isOnline && mqttClient && !hasSentInitialReset) {
      mqttClient.publish('clock/reset', 'reset');
      setHasSentInitialReset(true);
      console.log('üì§ ƒê√£ g·ª≠i l·ªánh reset t·ªõi ESP32 (ch·ªâ 1 l·∫ßn khi connect)');
    }
  }, [isOnline, mqttClient, hasSentInitialReset]);

  const handleResetTime = () => {
    if (mqttClient && mqttClient.connected) {
      mqttClient.publish('clock/reset', 'reset');
      console.log('üîÑ ƒê√£ g·ª≠i l·ªánh reset t·ªõi ESP32');
    } else {
      console.error('‚ùå MQTT client ch∆∞a k·∫øt n·ªëi');
      setConnectionError("Kh√¥ng th·ªÉ g·ª≠i l·ªánh - MQTT ch∆∞a k·∫øt n·ªëi");
    }
  };

  // Function ƒë·ªÉ refresh th·ªùi gian cho ESP32TimeDisplay component
  const handleRefreshTime = async () => {
    return new Promise<void>((resolve, reject) => {
      if (!mqttClient || !mqttClient.connected) {
        reject(new Error("MQTT ch∆∞a k·∫øt n·ªëi"));
        return;
      }

      const timeout = setTimeout(() => {
        reject(new Error("Timeout - ESP32 kh√¥ng ph·∫£n h·ªìi"));
      }, 10000);

      const messageHandler = (topic: string) => {
        if (topic === 'clock/time') {
          clearTimeout(timeout);
          mqttClient.off('message', messageHandler);
          resolve();
        }
      };

      mqttClient.on('message', messageHandler);
      mqttClient.publish('clock/reset', 'reset');
    });
  };

  // Debug: log tr·∫°ng th√°i online/offline c·ªßa ESP32
  useEffect(() => {
    const checkEsp32Online = setInterval(() => {
      if (lastMqttUpdate && Date.now() - lastMqttUpdate < 30000) {
        if (!esp32Online) {
          console.log('[DEBUG] ESP32 chuy·ªÉn sang ONLINE');
        }
        setEsp32Online(true);
      } else {
        if (esp32Online) {
          console.log('[DEBUG] ESP32 chuy·ªÉn sang OFFLINE');
        }
        setEsp32Online(false);
      }
    }, 2000);
    return () => clearInterval(checkEsp32Online);
  }, [lastMqttUpdate, esp32Online]);

  return (
    <div className="container py-5">
      {/* Component hi·ªÉn th·ªã th·ªùi gian ESP32 m·ªõi */}
      <ESP32TimeDisplay 
        time={isMounted ? currentTime : "00:00:00"}
        isConnected={isMounted ? isOnline : false}
        onRefresh={handleRefreshTime}
      />
      
      {/* Hi·ªÉn th·ªã l·ªói k·∫øt n·ªëi n·∫øu c√≥ */}
      {connectionError && (
        <div className="alert alert-warning alert-dismissible fade show" role="alert">
          <i className="bi bi-exclamation-triangle-fill me-2"></i>
          <strong>C·∫£nh b√°o k·∫øt n·ªëi:</strong> {connectionError}
          <button 
            type="button" 
            className="btn-close" 
            onClick={() => setConnectionError("")}
            aria-label="Close"
          ></button>
        </div>
      )}

      {/* Component clock display truy·ªÅn th·ªëng (backup) */}
      <ClockDisplay time={isMounted ? currentTime : "00:00:00"} />
      
      {/* C·∫≠p nh·∫≠t tr·∫°ng th√°i thi·∫øt b·ªã ESP32 th·ª±c s·ª± */}
      <DeviceStatus online={esp32Online} />
      <NextAlarm alarmTime={nextAlarm} />
      
      <div className="my-3 text-center">
        <button 
          onClick={handleResetTime} 
          className="btn btn-warning me-3"
          disabled={!isMounted || !isOnline}
        >
          üîÑ ƒê·ªìng b·ªô th·ªùi gian
        </button>
        <Link href="/alarm" className="btn btn-primary">
          + Th√™m b√°o th·ª©c
        </Link>
      </div>

      {/* Th√¥ng tin debug */}
      {process.env.NODE_ENV === 'development' && (
        <div className="mt-4">
          <div className="card bg-light">
            <div className="card-body">
              <h6 className="card-title">üîß Debug Info</h6>
              <small className="text-muted">
                <div>MQTT Connected: {isOnline ? '‚úÖ' : '‚ùå'}</div>
                <div>ESP32 Online: {esp32Online ? '‚úÖ' : '‚ùå'}</div>
                <div>Current Time: {currentTime}</div>
                <div>Last Update: {lastMqttUpdate ? new Date(lastMqttUpdate).toLocaleTimeString() : 'Ch∆∞a c√≥'}</div>
                <div>Connection Error: {connectionError || 'Kh√¥ng c√≥'}</div>
                {(!esp32Online && lastMqttUpdate) && (
                  <div className="text-danger">[DEBUG] ƒê√£ nh·∫≠n d·ªØ li·ªáu t·ª´ ESP32 nh∆∞ng v·∫´n offline. lastMqttUpdate: {new Date(lastMqttUpdate).toLocaleTimeString()}</div>
                )}
              </small>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
